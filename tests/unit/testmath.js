assert(typeof PhiloGL.Vec3 === 'function');
assert(typeof PhiloGL.Mat4 === 'function');

var v = new PhiloGL.Vec3;
assert(v.x === 0);
assert(v.y === 0);
assert(v.z === 0);
assert(typeof v.add === 'function');
assert(typeof v.add2 === 'function');
assert(typeof v.clone === 'function');
assert(typeof v.cross === 'function');
assert(typeof v.distTo === 'function');
assert(typeof v.distToSq === 'function');
assert(typeof v.dot === 'function');
assert(typeof v.neg === 'function');
assert(typeof v.norm === 'function');
assert(typeof v.normSq === 'function');
assert(typeof v.scale === 'function');
assert(typeof v.setVec3 === 'function');
assert(typeof v.sub === 'function');
assert(typeof v.sub2 === 'function');
assert(typeof v.unit === 'function');
delete v;

var m = new PhiloGL.Mat4;
assert(m.n11 === 1);
assert(m.n12 === 0);
assert(m.n13 === 0);
assert(m.n14 === 0);
assert(m.n21 === 0);
assert(m.n22 === 1);
assert(m.n23 === 0);
assert(m.n24 === 0);
assert(m.n31 === 0);
assert(m.n32 === 0);
assert(m.n33 === 1);
assert(m.n34 === 0);
assert(m.n41 === 0);
assert(m.n42 === 0);
assert(m.n43 === 0);
assert(m.n44 === 1);
assert(typeof m.add === 'function');
assert(typeof m.frustum === 'function');
assert(typeof m.id === 'function');
assert(typeof m.invert === 'function');
assert(typeof m.lookAt === 'function');
assert(typeof m.mulMat4 === 'function');
assert(typeof m.mulMat42 === 'function');
assert(typeof m.mulVec3 === 'function');
assert(typeof m.perspective === 'function');
assert(typeof m.rotateAxis === 'function');
assert(typeof m.rotateXYZ === 'function');
assert(typeof m.scale === 'function');
assert(typeof m.set === 'function');
assert(typeof m.toFloat32Array === 'function');
assert(typeof m.translate === 'function');
assert(typeof m.transpose === 'function');
delete m;

